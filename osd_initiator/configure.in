dnl Process this file with autoconf to produce a configure script.
AC_INIT([libosd], [0.1], [bettsp@osc.edu])
AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(libosd, 0.1)
AC_SUBST(VERSION)

ISODATE=`date +%Y-%m-%d`
AC_SUBST(ISODATE)
AM_MAINTAINER_MODE
AM_CONFIG_HEADER(config.h)

dnl ################################################################
dnl # Version information
dnl ################################################################
LIBOSD_MAJOR_VERSION=0
LIBOSD_MINOR_VERSION=1
LIBOSD_MICRO_VERSION=0
LIBOSD_DEVEL_VERSION=0

LIBOSD_VERSION=$LIBOSD_MAJOR_VERSION.$LIBOSD_MINOR_VERSION.$LIBOSD_MICRO_VERSION

if test "x$LIBOSD_DEVEL_VERSION" != "x0"; then
	LIBOSD_VERSION=$LIBOSD_VERSION.$LIBOSD_DEVEL_VERSION
fi

AC_DEFINE_UNQUOTED(LIBOSD_MAJOR_VERSION, $LIBOSD_MAJOR_VERSION,
	[libosd major version.])
AC_DEFINE_UNQUOTED(LIBOSD_MINOR_VERSION, $LIBOSD_MINOR_VERSION,
	[libosd minor version.])
AC_DEFINE_UNQUOTED(LIBOSD_MICRO_VERSION, $LIBOSD_MICRO_VERSION,
	[libosd micro version.])
AC_DEFINE_UNQUOTED(LIBOSD_VERSION, "$LIBOSD_VERSION",
	[libosd version.])


dnl Checks for programs.
AC_PROG_INSTALL
AC_PROG_CC
AM_PROG_LIBTOOL

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(unistd.h sys/param.h sys/time.h time.h sys/mkdev.h sys/sysmacros.h string.h memory.h fcntl.h dirent.h sys/ndir.h ndir.h alloca.h locale.h )


dnl Python

PYTHON_REQUIRED=2.3

AC_ARG_ENABLE(python,
	AC_HELP_STRING([--disable-python], [Disable python support (default auto)]),
	enable_python=$enableval,
	enable_python=auto)

have_python=no
if test "x$enable_python" != "xno"; then
	have_python_version=no
	have_python_headers=no

	AM_PATH_PYTHON()

	if test -z "$PYTHON"; then
		AC_MSG_WARN([Python not found])
	else
		AM_PYTHON_CHECK_VERSION($PYTHON, $PYTHON_REQUIRED,
			have_python_version=yes,
			have_python_version=no)
	fi

	if test "x$have_python_version" != "xyes"; then
		AC_MSG_WARN([Python version $PYTHON_REQUIRED not found])
	else
		AM_CHECK_PYTHON_HEADERS(have_python_headers=yes, have_python_headers=no)
	fi

	if test "x$have_python_headers" != "xyes"; then
		AC_MSG_WARN([could not find Python headers])
	else
		AC_PATH_PROG(PYREX, pyrexc, no)
	fi

	if test "x$PYREX" == "xno"; then
		AC_MSG_WARN([could not find Pyrex in path])
	else
		AC_SUBST(PYREX)
		have_python=yes
	fi
fi

if test "x$enable_python" = "xyes"; then
	if test "x$have_python" = "xno"; then
		AC_MSG_ERROR([Python bindings are requested, but cannot be built])
	fi
fi

AM_CONDITIONAL(ENABLE_PYTHON, test "x$have_python" == "xyes")


dnl ################################################################
dnl # libtool versioning
dnl ################################################################
dnl #
dnl # +1 :  0 : +1   == new interface that does not break old one.
dnl # +1 :  0 :  0   == removed an interface. Breaks old apps.
dnl #  ? : +1 :  ?   == internal changes that doesn't break anything.
dnl #
dnl # CURRENT : REVISION : AGE
dnl #
LT_CURRENT=1
LT_REVISION=0
LT_AGE=1

LT_RELEASE=$LIBOSD_MAJOR_VERSION.$LIBOSD_MINOR_VERSION.$LIBOSD_MICRO_VERSION

AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

AC_HEADER_MAJOR
AC_FUNC_ALLOCA
AC_STRUCT_TM
AC_STRUCT_ST_BLOCKS
AC_FUNC_CLOSEDIR_VOID
AC_CHECK_FUNCS(mkfifo)
AC_CHECK_FUNC(mknod)

echo "

	Prefix: 	  		${prefix}
	Using kernel dir: 		${KDIR}
	Building Python bindings: 	${enable_python}

"

AC_OUTPUT([
	   Makefile
	   python/Makefile
	])
