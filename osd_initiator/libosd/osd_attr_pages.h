/*************************************************************
** Copyright 2004, 2005. IBM Corp.** All Rights Reserved.***
**************************************************************
** Redistribution and use in source and binary forms, with or without
** modifications, are permitted provided that the following conditions 
** are met:
** 
** i.  Redistribution of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**
** ii. Redistribution in binary form must reproduce the above copyright 
**     notice, this list of conditions and the following disclaimer in the 
**     documentation and/or other materials provided with the distribution.
**
** iii.Neither the name(s) of IBM Corp.** nor the names of its/their
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
*******************************************************************
** THIS SOFTWARE IS PROVIDED BY IBM CORP. AND CONTRIBUTORS "AS IS" 
** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING , BUT NOT LIMITED
** TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
** PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE IBM
** CORP. OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
** INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
** (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 
** OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
** HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
** STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
** OF THE POSSIBILITY OF SUCH DAMAGE.
** 
*****************************************************************************
*****************************************************************************/
/* This File was automatically generated by script gawk
 * source file: ../src/t10/osd/osd_attr_pages.src.
 * generation time:Mon Aug 29 06:40:46 EDT 2005
 */
//File: ../obj/osd_attr_pages_h.tmp

#ifndef OSD_ATTR_PAGES_H
#define OSD_ATTR_PAGES_H
////////////////////////////////////////////
//first part general definitions for formats

#define MAX_NAME_LEN 38 
#define OSD_MAX_ATTR_SIZE 65 

typedef struct {
    uint32_t num; // attribute_number / NUM_EMPTY for other fields
    char name[MAX_NAME_LEN];
    type_num_t type_num;
    uint32_t size;
    uint32_t offset;//offset of the field within the page struct
    attr_access_t access; //attribute supported access/NO_ACCESS
    int nullable;
    int pf_only; 
    const char * const_value;
    uint32_t page_num;//attribute page num/NUM_EMPTY for others
} gen_field_t;

typedef struct {
    uint32_t num;
    char name[MAX_NAME_LEN];
    uint32_t page_size;//used for page format only.
    uint32_t struct_size;
    int      pf_enabled; //is page-format defined for this page.
    uint32_t num_fields;
    gen_field_t *fields;
} gen_struct_t;

#define GEN_STRUCTS_NUM 23 

extern gen_struct_t gen_structs[GEN_STRUCTS_NUM];

////////////////////////////////////////////
// second part - for each struct defined
// c-struct, constants

///***************************** start_copyright_notice_OCO_2005	
// * IBM Confidential
// * OCO Source Materials
// * (C) Copyright IBM Corp. 2005
// * The source code for this program is not published or otherwise
// * divested of its trade secrets, irrespective of what has
// * been deposited with the U.S. Copyright Office.
//end_copyright_notice_OCO_2005
// ***********************************************************/
// todos compared to alons version
// set nullable
// set virtual
// others: set initial_value, is_mutable
// this is a source file for gen_formats.swk script which generates
// formats code according to this file.
// syntax and directions for use:
// this file is used to define 3 types of structures:
//  A.non-attributes fixed size standard structure (e.g. cdb header)
//  B.fixed-size attribute page (with only fixed size attributes)
//  C.variable-size attribute page (with at least one var-size attribute)
//
// the three types are defined using same syntax for definition
// but one should define each type by it's directions:
//general syntax
// each statement is in a different line.
// ';' at end of line can be used and is ignored
//  line beginning with '//' is copied to generated h file
// statements should be in the following form:
//
// struct <name> {
//   size nnn|NUM_EMPTY - NUM EMPTY used for var-size structures only
//   [num <num-expression may include spaces>] - used in attribute pages
//         num expression can use PAGE_R/PAGE_C/PAGE_P constants
//   [vendor vendor-codename] - in attribute pages only	   
//                            - default codename is INCITS
//   field <type> <name> {
//     (valid types: BYTE,uint16_t,UINT32,UINT64,offset32_t,time48_t}
//     [num <num expression>|NUM_EMPTY] - used for attributes
//     [access <access_type>] - used for attributes
//       (valid access types: 
//	 OSD_ATTR_NO_ACCESS, (default if not specified)
//	 OSD_ATTR_OSD_RD, osd supplied. read only
//	 OSD_ATTR_OSD_RW, osd supplied. read/write
//	 OSD_ATTR_USER_RW not osd supplied. read/write
//     size 0|nnnn - size in bytes. 0 marks var-size attribute
//     [offset nnn] - used in fixed size structures.
//   }
//}
// for attributes note thatt c defines fill get names
// including concatenation of 10 letter prefix,struct name,field name
// so names ahd better be no longer than 15 chars
// A. directions for non attribute standard struct :
// 1. don't use the 'num' and 'access' statements
// 2.use UPPER_CASE for struct name and lower case for field names.
// (lettercase is for convenience only - not a real syntax requirement)
// 3.specify size for struct
//   for each field specifi a nonzero size and the correct offset 
//   sizes and offsets are checked by script
// B. directions for fixed size attribute page :
// 1. specify the 'num' statement for struct and each attribute in it.
// 3. specify access type for each field.
// 4. use UPPER_CASE for both page name and attribute names.
// (lettercase is for convenience only - not a real syntax requirement)
// 5. specify size for struct
//    for each field specify a nonzero size and the correct offset 
//    sizes and offsets are checked by script
// C. directions for variable size attribute page :
// 1. specify the 'num' statement for struct and each attribute in it.
// 2. specify access type for each field.
// 3. use UPPER_CASE for both page name and attribute names.
// (lettercase is for convenience only - not a real syntax requirement)
// 4. specify 'size NUM_EMPTY' for struct
//    for each field specify  'size <nnn>' (nnn=0 for var-size attribute) 
// 5. don't use 'offset' statement
//
//Additional syntax:
// For each attribute page you may specify: `page_id "<text>"'
// <text> will be used both for traces and for automatic definition of
// attribute number 0 in the page.
// If the page id attribute number should be other than 0 you may set
// it by `page_id_attr_num <number>'
// if page_id_attr_num is set to NUM_EMPTY an automatic page_id
// attribute will not be generated
///////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////
// ATTRIBUTE PAGES :
#define OSD_STRUCT_ROOT_DIRECTORY (&(gen_structs[0]))
#define OSD_PAGE_NUM_ROOT_DIRECTORY PAGE_R+0     
    // user object information attributes page. associated with a user object
    //variable size page

#define OSD_FIELD_ROOT_DIRECTORY_page_id (&(gen_structs[0].fields[0])) 
#define OSD_ATTR_NUM_ROOT_DIRECTORY_page_id PAGE_R+0     
#define OSD_FIELD_ROOT_DIRECTORY_page_length (&(gen_structs[0].fields[1])) 
#define OSD_FIELD_ROOT_DIRECTORY_A1 (&(gen_structs[0].fields[2])) 
#define OSD_ATTR_NUM_ROOT_DIRECTORY_A1 PAGE_R+1     
#define OSD_FIELD_ROOT_DIRECTORY_A2 (&(gen_structs[0].fields[3])) 
#define OSD_ATTR_NUM_ROOT_DIRECTORY_A2 PAGE_R+2     
#define OSD_FIELD_ROOT_DIRECTORY_A3 (&(gen_structs[0].fields[4])) 
#define OSD_ATTR_NUM_ROOT_DIRECTORY_A3 PAGE_R+3     
#define OSD_FIELD_ROOT_DIRECTORY_A5 (&(gen_structs[0].fields[5])) 
#define OSD_ATTR_NUM_ROOT_DIRECTORY_A5 PAGE_R+5     


#define OSD_STRUCT_PART_DIRECTORY (&(gen_structs[1]))
#define OSD_PAGE_NUM_PART_DIRECTORY PAGE_P+0     
    // user object information attributes page. associated with a user object
    //variable size page

#define OSD_FIELD_PART_DIRECTORY_page_id (&(gen_structs[1].fields[0])) 
#define OSD_ATTR_NUM_PART_DIRECTORY_page_id PAGE_P+0     
#define OSD_FIELD_PART_DIRECTORY_page_length (&(gen_structs[1].fields[1])) 
#define OSD_FIELD_PART_DIRECTORY_A1 (&(gen_structs[1].fields[2])) 
#define OSD_ATTR_NUM_PART_DIRECTORY_A1 PAGE_P+1     
#define OSD_FIELD_PART_DIRECTORY_A2 (&(gen_structs[1].fields[3])) 
#define OSD_ATTR_NUM_PART_DIRECTORY_A2 PAGE_P+2     
#define OSD_FIELD_PART_DIRECTORY_A3 (&(gen_structs[1].fields[4])) 
#define OSD_ATTR_NUM_PART_DIRECTORY_A3 PAGE_P+3     
#define OSD_FIELD_PART_DIRECTORY_A5 (&(gen_structs[1].fields[5])) 
#define OSD_ATTR_NUM_PART_DIRECTORY_A5 PAGE_P+5     


#define OSD_STRUCT_UOBJ_DIRECTORY (&(gen_structs[2]))
#define OSD_PAGE_NUM_UOBJ_DIRECTORY PAGE_U+0     
    // user object information attributes page. associated with a user object
    //variable size page

#define OSD_FIELD_UOBJ_DIRECTORY_page_id (&(gen_structs[2].fields[0])) 
#define OSD_ATTR_NUM_UOBJ_DIRECTORY_page_id 0
#define OSD_FIELD_UOBJ_DIRECTORY_page_length (&(gen_structs[2].fields[1])) 
#define OSD_FIELD_UOBJ_DIRECTORY_A1 (&(gen_structs[2].fields[2])) 
#define OSD_ATTR_NUM_UOBJ_DIRECTORY_A1 PAGE_U+1     
#define OSD_FIELD_UOBJ_DIRECTORY_A2 (&(gen_structs[2].fields[3])) 
#define OSD_ATTR_NUM_UOBJ_DIRECTORY_A2 PAGE_U+2     
#define OSD_FIELD_UOBJ_DIRECTORY_A3 (&(gen_structs[2].fields[4])) 
#define OSD_ATTR_NUM_UOBJ_DIRECTORY_A3 PAGE_U+3     
//  Attribute 4 should be of length zero(=empty) since collections are not suported
//    constant "INCITS  T10 Collections"
#define OSD_FIELD_UOBJ_DIRECTORY_A4 (&(gen_structs[2].fields[5])) 
#define OSD_ATTR_NUM_UOBJ_DIRECTORY_A4 PAGE_U+4     
#define OSD_FIELD_UOBJ_DIRECTORY_A5 (&(gen_structs[2].fields[6])) 
#define OSD_ATTR_NUM_UOBJ_DIRECTORY_A5 PAGE_U+5     


#define OSD_STRUCT_ROOT_INFO (&(gen_structs[3]))
#define OSD_PAGE_NUM_ROOT_INFO PAGE_R+1     
    // user object information attributes page. associated with a user object
    //variable size page
    //reserved attr 1,2 omitted
    //system identifier should be a 20 bytes zero padded SPC-3 device identifier
    //see rev10 sec 7.1.2.8

#define OSD_FIELD_ROOT_INFO_page_id (&(gen_structs[3].fields[0])) 
#define OSD_ATTR_NUM_ROOT_INFO_page_id 0
#define OSD_FIELD_ROOT_INFO_page_length (&(gen_structs[3].fields[1])) 
#define OSD_FIELD_ROOT_INFO_OSD_SYSTEM_ID (&(gen_structs[3].fields[2])) 
#define OSD_ATTR_NUM_ROOT_INFO_OSD_SYSTEM_ID 0x3     
    //all following attributes until OSD_NAME are ACSII.
#define OSD_FIELD_ROOT_INFO_VENDOR_ID (&(gen_structs[3].fields[3])) 
#define OSD_ATTR_NUM_ROOT_INFO_VENDOR_ID 0x4     
#define OSD_FIELD_ROOT_INFO_PRODUCT_ID (&(gen_structs[3].fields[4])) 
#define OSD_ATTR_NUM_ROOT_INFO_PRODUCT_ID 0x5     
#define OSD_FIELD_ROOT_INFO_PRODUCT_MODEL (&(gen_structs[3].fields[5])) 
#define OSD_ATTR_NUM_ROOT_INFO_PRODUCT_MODEL 0x6     
#define OSD_FIELD_ROOT_INFO_PRODUCT_REVISION_LEVEL (&(gen_structs[3].fields[6])) 
#define OSD_ATTR_NUM_ROOT_INFO_PRODUCT_REVISION_LEVEL 0x7     
	//var size
#define OSD_FIELD_ROOT_INFO_SERIAL_NUMBER (&(gen_structs[3].fields[7])) 
#define OSD_ATTR_NUM_ROOT_INFO_SERIAL_NUMBER 0x8     
#define OSD_FIELD_ROOT_INFO_OSD_NAME (&(gen_structs[3].fields[8])) 
#define OSD_ATTR_NUM_ROOT_INFO_OSD_NAME 0x9     
    //reserved attr 0xA-0x7F omitted
#define OSD_FIELD_ROOT_INFO_TOTAL_CAPACITY (&(gen_structs[3].fields[9])) 
#define OSD_ATTR_NUM_ROOT_INFO_TOTAL_CAPACITY 0x80     
#define OSD_FIELD_ROOT_INFO_USED_CAPACITY (&(gen_structs[3].fields[10])) 
#define OSD_ATTR_NUM_ROOT_INFO_USED_CAPACITY 0x81     
    //reserved attr 0x82-0xBF omitted
    //num of currently present partitions
#define OSD_FIELD_ROOT_INFO_NUM_OF_PARTITIONS (&(gen_structs[3].fields[11])) 
#define OSD_ATTR_NUM_ROOT_INFO_NUM_OF_PARTITIONS 0xc0     
    //reserved attr 0xc1-0xff omitted
#define OSD_FIELD_ROOT_INFO_CLOCK (&(gen_structs[3].fields[12])) 
#define OSD_ATTR_NUM_ROOT_INFO_CLOCK 0x100     
// guy: temps (xxx) these belong in partition 0
//    field TIME CREATED_TIME {
//    num 0xd0
//    access OSD_ATTR_OSD_RD
//    }
//    field UINT32 USER_OBJ_VERSION_TAG {
//    num 0x102
//    access OSD_ATTR_OSD_RW
//    }
    // not implementing reserved attributes 0x101-end


#define OSD_STRUCT_PART_INFO (&(gen_structs[4]))
#define OSD_PAGE_NUM_PART_INFO PAGE_P+1     
    // user object information attributes page. associated with a user object
    //variable size page

#define OSD_FIELD_PART_INFO_page_id (&(gen_structs[4].fields[0])) 
#define OSD_ATTR_NUM_PART_INFO_page_id 0
#define OSD_FIELD_PART_INFO_page_length (&(gen_structs[4].fields[1])) 
#define OSD_FIELD_PART_INFO_PARTITION_ID (&(gen_structs[4].fields[2])) 
#define OSD_ATTR_NUM_PART_INFO_PARTITION_ID 0x1     
    //reserved attr 0x2-0x8 omitted
	//variable size
#define OSD_FIELD_PART_INFO_USERNAME (&(gen_structs[4].fields[3])) 
#define OSD_ATTR_NUM_PART_INFO_USERNAME 0x9     
    //reserved attr 0xA-0x80 omitted
#define OSD_FIELD_PART_INFO_USED_CAPACITY (&(gen_structs[4].fields[4])) 
#define OSD_ATTR_NUM_PART_INFO_USED_CAPACITY 0x81     
    //reserved attr 0x82-0xC0 omitted
    //num of currently present objects&collections in partition
#define OSD_FIELD_PART_INFO_NUM_OF_OBJECTS (&(gen_structs[4].fields[5])) 
#define OSD_ATTR_NUM_PART_INFO_NUM_OF_OBJECTS 0xC1     
    // not implementing reserved attributes 0xc2-end

// no collections yet... not implementing collection info page

#define OSD_STRUCT_UOBJ_INFO (&(gen_structs[5]))
#define OSD_PAGE_NUM_UOBJ_INFO PAGE_U+0x1     
    // user object information attributes page. associated with a user object
    //variable size page

#define OSD_FIELD_UOBJ_INFO_page_id (&(gen_structs[5].fields[0])) 
#define OSD_ATTR_NUM_UOBJ_INFO_page_id 0
#define OSD_FIELD_UOBJ_INFO_page_length (&(gen_structs[5].fields[1])) 
#define OSD_FIELD_UOBJ_INFO_PARTITION_ID (&(gen_structs[5].fields[2])) 
#define OSD_ATTR_NUM_UOBJ_INFO_PARTITION_ID 0x1     
#define OSD_FIELD_UOBJ_INFO_OBJECT_ID (&(gen_structs[5].fields[3])) 
#define OSD_ATTR_NUM_UOBJ_INFO_OBJECT_ID 0x2     
    // not implementing reserved attributes 3h-8h 
    // since it is variable size page anyhow and accessed as single attributes only
	//variable size
#define OSD_FIELD_UOBJ_INFO_USERNAME (&(gen_structs[5].fields[4])) 
#define OSD_ATTR_NUM_UOBJ_INFO_USERNAME 0x9     
    // not implementing reserved attributes Ah-80h 
#define OSD_FIELD_UOBJ_INFO_USED_CAPACITY (&(gen_structs[5].fields[5])) 
#define OSD_ATTR_NUM_UOBJ_INFO_USED_CAPACITY 0x81     
#define OSD_FIELD_UOBJ_INFO_OBJ_LENGTH (&(gen_structs[5].fields[6])) 
#define OSD_ATTR_NUM_UOBJ_INFO_OBJ_LENGTH 0x82     


#define OSD_STRUCT_T10_USER_OC_PRIV_INFO (&(gen_structs[6]))
#define OSD_PAGE_NUM_T10_USER_OC_PRIV_INFO PAGE_U+0x10     
    // user object information attributes page. associated with a user object
    //variable size page

#define OSD_FIELD_T10_USER_OC_PRIV_INFO_page_id (&(gen_structs[6].fields[0])) 
#define OSD_ATTR_NUM_T10_USER_OC_PRIV_INFO_page_id 0
#define OSD_FIELD_T10_USER_OC_PRIV_INFO_page_length (&(gen_structs[6].fields[1])) 
#define OSD_FIELD_T10_USER_OC_PRIV_INFO_GENERAL0 (&(gen_structs[6].fields[2])) 
#define OSD_ATTR_NUM_T10_USER_OC_PRIV_INFO_GENERAL0 0x1     
#define OSD_FIELD_T10_USER_OC_PRIV_INFO_GENERAL1 (&(gen_structs[6].fields[3])) 
#define OSD_ATTR_NUM_T10_USER_OC_PRIV_INFO_GENERAL1 0x2     
#define OSD_FIELD_T10_USER_OC_PRIV_INFO_GENERAL2 (&(gen_structs[6].fields[4])) 
#define OSD_ATTR_NUM_T10_USER_OC_PRIV_INFO_GENERAL2 0x3     
#define OSD_FIELD_T10_USER_OC_PRIV_INFO_GENERAL3 (&(gen_structs[6].fields[5])) 
#define OSD_ATTR_NUM_T10_USER_OC_PRIV_INFO_GENERAL3 0x4     
#define OSD_FIELD_T10_USER_OC_PRIV_INFO_GENERAL4 (&(gen_structs[6].fields[6])) 
#define OSD_ATTR_NUM_T10_USER_OC_PRIV_INFO_GENERAL4 0x5     
#define OSD_FIELD_T10_USER_OC_PRIV_INFO_DL_NEXT (&(gen_structs[6].fields[7])) 
#define OSD_ATTR_NUM_T10_USER_OC_PRIV_INFO_DL_NEXT 0x6     
#define OSD_FIELD_T10_USER_OC_PRIV_INFO_DL_PREV (&(gen_structs[6].fields[8])) 
#define OSD_ATTR_NUM_T10_USER_OC_PRIV_INFO_DL_PREV 0x7     
#define OSD_FIELD_T10_USER_OC_PRIV_INFO_DEL_CURSOR (&(gen_structs[6].fields[9])) 
#define OSD_ATTR_NUM_T10_USER_OC_PRIV_INFO_DEL_CURSOR 0x8     


#define OSD_STRUCT_PART_OC_PRIV_INFO (&(gen_structs[7]))
#define OSD_PAGE_NUM_PART_OC_PRIV_INFO PAGE_P+0x10     
    // oc-private per-partition information attributes page
    //variable size page

#define OSD_FIELD_PART_OC_PRIV_INFO_page_id (&(gen_structs[7].fields[0])) 
#define OSD_ATTR_NUM_PART_OC_PRIV_INFO_page_id 0
#define OSD_FIELD_PART_OC_PRIV_INFO_page_length (&(gen_structs[7].fields[1])) 
    // nullable
#define OSD_FIELD_PART_OC_PRIV_INFO_NUM_OBJECTS (&(gen_structs[7].fields[2])) 
#define OSD_ATTR_NUM_PART_OC_PRIV_INFO_NUM_OBJECTS 0x2     


#define OSD_STRUCT_ROOT_OC_PRIV_INFO (&(gen_structs[8]))
#define OSD_PAGE_NUM_ROOT_OC_PRIV_INFO PAGE_R+0x10     
    // oc-private per-LUN information attributes page
    //variable size page

#define OSD_FIELD_ROOT_OC_PRIV_INFO_page_id (&(gen_structs[8].fields[0])) 
#define OSD_ATTR_NUM_ROOT_OC_PRIV_INFO_page_id 0
#define OSD_FIELD_ROOT_OC_PRIV_INFO_page_length (&(gen_structs[8].fields[1])) 
    // nullable
#define OSD_FIELD_ROOT_OC_PRIV_INFO_TDLIST_ROOT_LBA (&(gen_structs[8].fields[2])) 
#define OSD_ATTR_NUM_ROOT_OC_PRIV_INFO_TDLIST_ROOT_LBA 0x1     


#define OSD_STRUCT_ROOT_QUOTAS (&(gen_structs[9]))
#define OSD_PAGE_NUM_ROOT_QUOTAS PAGE_R+0x2     
    // quotas attribute page (associated with root object)

#define OSD_FIELD_ROOT_QUOTAS_page_id (&(gen_structs[9].fields[0])) 
#define OSD_ATTR_NUM_ROOT_QUOTAS_page_id 0
#define OSD_FIELD_ROOT_QUOTAS_page_length (&(gen_structs[9].fields[1])) 
#define OSD_FIELD_ROOT_QUOTAS_DEFAULT_MAX_OBJ_LEN (&(gen_structs[9].fields[2])) 
#define OSD_ATTR_NUM_ROOT_QUOTAS_DEFAULT_MAX_OBJ_LEN 0x1     
    //reserved 2-0x10000
#define OSD_FIELD_ROOT_QUOTAS_PARTITION_CAPACITY_QUOTA (&(gen_structs[9].fields[3])) 
#define OSD_ATTR_NUM_ROOT_QUOTAS_PARTITION_CAPACITY_QUOTA 0x10001     
#define OSD_FIELD_ROOT_QUOTAS_PARTITION_OBJ_COUNT (&(gen_structs[9].fields[4])) 
#define OSD_ATTR_NUM_ROOT_QUOTAS_PARTITION_OBJ_COUNT 0x10002     
    //reserved 0x10003-0x10080
#define OSD_FIELD_ROOT_QUOTAS_PARTITION_COLLECTIONS_PER_OBJ (&(gen_structs[9].fields[5])) 
#define OSD_ATTR_NUM_ROOT_QUOTAS_PARTITION_COLLECTIONS_PER_OBJ 0x10081     
    //reserved 0x10082-0x20001
#define OSD_FIELD_ROOT_QUOTAS_PARTITION_COUNT (&(gen_structs[9].fields[6])) 
#define OSD_ATTR_NUM_ROOT_QUOTAS_PARTITION_COUNT 0x20002     

typedef struct {
    uint32_t page_id;
    uint32_t page_length;
    uint64_t DEFAULT_MAX_OBJ_LEN;
    uint64_t PARTITION_CAPACITY_QUOTA;
    uint64_t PARTITION_OBJ_COUNT;
    uint32_t PARTITION_COLLECTIONS_PER_OBJ;
    uint64_t PARTITION_COUNT;
    PACKED_STRUCT_END;
} PACKED OSD_ROOT_QUOTAS_t;

#define SIZEOF_OSD_ROOT_QUOTAS_t 44 


#define OSD_STRUCT_PART_QUOTAS (&(gen_structs[10]))
#define OSD_PAGE_NUM_PART_QUOTAS PAGE_P+0x2     

#define OSD_FIELD_PART_QUOTAS_page_id (&(gen_structs[10].fields[0])) 
#define OSD_ATTR_NUM_PART_QUOTAS_page_id 0
#define OSD_FIELD_PART_QUOTAS_page_length (&(gen_structs[10].fields[1])) 
#define OSD_FIELD_PART_QUOTAS_DEFAULT_MAX_OBJ_LEN (&(gen_structs[10].fields[2])) 
#define OSD_ATTR_NUM_PART_QUOTAS_DEFAULT_MAX_OBJ_LEN 0x1     
    //reserved 2-0x10000
#define OSD_FIELD_PART_QUOTAS_CAPACITY_QUOTA (&(gen_structs[10].fields[3])) 
#define OSD_ATTR_NUM_PART_QUOTAS_CAPACITY_QUOTA 0x10001     
#define OSD_FIELD_PART_QUOTAS_OBJ_COUNT (&(gen_structs[10].fields[4])) 
#define OSD_ATTR_NUM_PART_QUOTAS_OBJ_COUNT 0x10002     
    //reserved 0x10003-0x10080
#define OSD_FIELD_PART_QUOTAS_COLLECTIONS_PER_OBJ (&(gen_structs[10].fields[5])) 
#define OSD_ATTR_NUM_PART_QUOTAS_COLLECTIONS_PER_OBJ 0x10081     
    //reserved 0x10082-end

typedef struct {
    uint32_t page_id;
    uint32_t page_length;
    uint64_t DEFAULT_MAX_OBJ_LEN;
    uint64_t CAPACITY_QUOTA;
    uint64_t OBJ_COUNT;
    uint32_t COLLECTIONS_PER_OBJ;
    PACKED_STRUCT_END;
} PACKED OSD_PART_QUOTAS_t;

#define SIZEOF_OSD_PART_QUOTAS_t 36 


#define OSD_STRUCT_UOBJ_QUOTAS (&(gen_structs[11]))
#define OSD_PAGE_NUM_UOBJ_QUOTAS PAGE_U+0x2     

#define OSD_FIELD_UOBJ_QUOTAS_page_id (&(gen_structs[11].fields[0])) 
#define OSD_ATTR_NUM_UOBJ_QUOTAS_page_id 0
#define OSD_FIELD_UOBJ_QUOTAS_page_length (&(gen_structs[11].fields[1])) 
#define OSD_FIELD_UOBJ_QUOTAS_MAX_OBJ_LEN (&(gen_structs[11].fields[2])) 
#define OSD_ATTR_NUM_UOBJ_QUOTAS_MAX_OBJ_LEN 0x1     
    //reserved 2-end

typedef struct {
    uint32_t page_id;
    uint32_t page_length;
    uint64_t MAX_OBJ_LEN;
    PACKED_STRUCT_END;
} PACKED OSD_UOBJ_QUOTAS_t;

#define SIZEOF_OSD_UOBJ_QUOTAS_t 16 


#define OSD_STRUCT_ROOT_TIMESTAMPS (&(gen_structs[12]))
#define OSD_PAGE_NUM_ROOT_TIMESTAMPS PAGE_R+0x3     

#define OSD_FIELD_ROOT_TIMESTAMPS_page_id (&(gen_structs[12].fields[0])) 
#define OSD_ATTR_NUM_ROOT_TIMESTAMPS_page_id 0
#define OSD_FIELD_ROOT_TIMESTAMPS_page_length (&(gen_structs[12].fields[1])) 
#define OSD_FIELD_ROOT_TIMESTAMPS_ATTR_ACCESSED_TIME (&(gen_structs[12].fields[2])) 
#define OSD_ATTR_NUM_ROOT_TIMESTAMPS_ATTR_ACCESSED_TIME 0x2     
#define OSD_FIELD_ROOT_TIMESTAMPS_ATTR_MODIFIED_TIME (&(gen_structs[12].fields[3])) 
#define OSD_ATTR_NUM_ROOT_TIMESTAMPS_ATTR_MODIFIED_TIME 0x3     
#define OSD_FIELD_ROOT_TIMESTAMPS_TIMESTAMP_BYPASS (&(gen_structs[12].fields[4])) 
#define OSD_ATTR_NUM_ROOT_TIMESTAMPS_TIMESTAMP_BYPASS 0xfffffffe     
    //reserved 2-end

typedef struct {
    uint32_t page_id;
    uint32_t page_length;
    uint48_t ATTR_ACCESSED_TIME;
    uint48_t ATTR_MODIFIED_TIME;
    uint8_t TIMESTAMP_BYPASS;
    PACKED_STRUCT_END;
} PACKED OSD_ROOT_TIMESTAMPS_t;

#define SIZEOF_OSD_ROOT_TIMESTAMPS_t 21 


#define OSD_STRUCT_PART_TIMESTAMPS (&(gen_structs[13]))
#define OSD_PAGE_NUM_PART_TIMESTAMPS PAGE_P+0x3     

#define OSD_FIELD_PART_TIMESTAMPS_page_id (&(gen_structs[13].fields[0])) 
#define OSD_ATTR_NUM_PART_TIMESTAMPS_page_id 0
#define OSD_FIELD_PART_TIMESTAMPS_page_length (&(gen_structs[13].fields[1])) 
#define OSD_FIELD_PART_TIMESTAMPS_CREATED_TIME (&(gen_structs[13].fields[2])) 
#define OSD_ATTR_NUM_PART_TIMESTAMPS_CREATED_TIME 0x1     
#define OSD_FIELD_PART_TIMESTAMPS_ATTR_ACCESSED_TIME (&(gen_structs[13].fields[3])) 
#define OSD_ATTR_NUM_PART_TIMESTAMPS_ATTR_ACCESSED_TIME 0x2     
#define OSD_FIELD_PART_TIMESTAMPS_ATTR_MODIFIED_TIME (&(gen_structs[13].fields[4])) 
#define OSD_ATTR_NUM_PART_TIMESTAMPS_ATTR_MODIFIED_TIME 0x3     
#define OSD_FIELD_PART_TIMESTAMPS_DATA_ACCESSED_TIME (&(gen_structs[13].fields[5])) 
#define OSD_ATTR_NUM_PART_TIMESTAMPS_DATA_ACCESSED_TIME 0x4     
#define OSD_FIELD_PART_TIMESTAMPS_DATA_MODIFIED_TIME (&(gen_structs[13].fields[6])) 
#define OSD_ATTR_NUM_PART_TIMESTAMPS_DATA_MODIFIED_TIME 0x5     
#define OSD_FIELD_PART_TIMESTAMPS_TIMESTAMP_BYPASS (&(gen_structs[13].fields[7])) 
#define OSD_ATTR_NUM_PART_TIMESTAMPS_TIMESTAMP_BYPASS 0xfffffffe     
    //reserved 2-end

typedef struct {
    uint32_t page_id;
    uint32_t page_length;
    uint48_t CREATED_TIME;
    uint48_t ATTR_ACCESSED_TIME;
    uint48_t ATTR_MODIFIED_TIME;
    uint48_t DATA_ACCESSED_TIME;
    uint48_t DATA_MODIFIED_TIME;
    uint8_t TIMESTAMP_BYPASS;
    PACKED_STRUCT_END;
} PACKED OSD_PART_TIMESTAMPS_t;

#define SIZEOF_OSD_PART_TIMESTAMPS_t 39 

//collections timestamp page not implemented

#define OSD_STRUCT_UOBJ_TIMESTAMPS (&(gen_structs[14]))
#define OSD_PAGE_NUM_UOBJ_TIMESTAMPS PAGE_U+0x3     

#define OSD_FIELD_UOBJ_TIMESTAMPS_page_id (&(gen_structs[14].fields[0])) 
#define OSD_ATTR_NUM_UOBJ_TIMESTAMPS_page_id 0
#define OSD_FIELD_UOBJ_TIMESTAMPS_page_length (&(gen_structs[14].fields[1])) 
#define OSD_FIELD_UOBJ_TIMESTAMPS_CREATED_TIME (&(gen_structs[14].fields[2])) 
#define OSD_ATTR_NUM_UOBJ_TIMESTAMPS_CREATED_TIME 0x1     
#define OSD_FIELD_UOBJ_TIMESTAMPS_ATTR_ACCESSED_TIME (&(gen_structs[14].fields[3])) 
#define OSD_ATTR_NUM_UOBJ_TIMESTAMPS_ATTR_ACCESSED_TIME 0x2     
#define OSD_FIELD_UOBJ_TIMESTAMPS_ATTR_MODIFIED_TIME (&(gen_structs[14].fields[4])) 
#define OSD_ATTR_NUM_UOBJ_TIMESTAMPS_ATTR_MODIFIED_TIME 0x3     
#define OSD_FIELD_UOBJ_TIMESTAMPS_DATA_ACCESSED_TIME (&(gen_structs[14].fields[5])) 
#define OSD_ATTR_NUM_UOBJ_TIMESTAMPS_DATA_ACCESSED_TIME 0x4     
#define OSD_FIELD_UOBJ_TIMESTAMPS_DATA_MODIFIED_TIME (&(gen_structs[14].fields[6])) 
#define OSD_ATTR_NUM_UOBJ_TIMESTAMPS_DATA_MODIFIED_TIME 0x5     

typedef struct {
    uint32_t page_id;
    uint32_t page_length;
    uint48_t CREATED_TIME;
    uint48_t ATTR_ACCESSED_TIME;
    uint48_t ATTR_MODIFIED_TIME;
    uint48_t DATA_ACCESSED_TIME;
    uint48_t DATA_MODIFIED_TIME;
    PACKED_STRUCT_END;
} PACKED OSD_UOBJ_TIMESTAMPS_t;

#define SIZEOF_OSD_UOBJ_TIMESTAMPS_t 38 

//collections are not supported - implementation is by rev 10 section 4.6.6

#define OSD_STRUCT_T10_COLLECTIONS (&(gen_structs[15]))
#define OSD_PAGE_NUM_T10_COLLECTIONS PAGE_U+0x4     
    //page_id="" is a special case causing zero-length attribute 0

#define OSD_FIELD_T10_COLLECTIONS_page_id (&(gen_structs[15].fields[0])) 
#define OSD_ATTR_NUM_T10_COLLECTIONS_page_id 0
#define OSD_FIELD_T10_COLLECTIONS_page_length (&(gen_structs[15].fields[1])) 

//page format is complicated for this page and we don't support it

#define OSD_STRUCT_ROOT_SECURITY (&(gen_structs[16]))
#define OSD_PAGE_NUM_ROOT_SECURITY PAGE_R+0x5     

#define OSD_FIELD_ROOT_SECURITY_page_id (&(gen_structs[16].fields[0])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_page_id 0
#define OSD_FIELD_ROOT_SECURITY_page_length (&(gen_structs[16].fields[1])) 
#define OSD_FIELD_ROOT_SECURITY_DEFAULT_SEC_METHOD (&(gen_structs[16].fields[2])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_DEFAULT_SEC_METHOD 0x1     
#define OSD_FIELD_ROOT_SECURITY_PARTITION_DEFAULT_SEC_METHOD (&(gen_structs[16].fields[3])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_PARTITION_DEFAULT_SEC_METHOD 0x6     
#define OSD_FIELD_ROOT_SECURITY_SUPPORTED_SEC_METHODS (&(gen_structs[16].fields[4])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_SUPPORTED_SEC_METHODS 0x7     
//unused in NOSEC/CAPKEY
#define OSD_FIELD_ROOT_SECURITY_OLDEST_VALID_NONCE (&(gen_structs[16].fields[5])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_OLDEST_VALID_NONCE 0x2     
//unused in NOSEC/CAPKEY
#define OSD_FIELD_ROOT_SECURITY_NEWEST_VALID_NONCE (&(gen_structs[16].fields[6])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_NEWEST_VALID_NONCE 0x3     
#define OSD_FIELD_ROOT_SECURITY_ADJUSTABLE_CLOCK (&(gen_structs[16].fields[7])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_ADJUSTABLE_CLOCK 0x9     
#define OSD_FIELD_ROOT_SECURITY_KEY_IDS_FLAGS (&(gen_structs[16].fields[8])) 
#define OSD_FIELD_ROOT_SECURITY_MASTER_KEY_ID (&(gen_structs[16].fields[9])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_MASTER_KEY_ID 0x7FFD     
#define OSD_FIELD_ROOT_SECURITY_ROOT_KEY_ID (&(gen_structs[16].fields[10])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_ROOT_KEY_ID 0x7FFE     
//supported integrity check value algorithms
#define OSD_FIELD_ROOT_SECURITY_ALG_1 (&(gen_structs[16].fields[11])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_ALG_1 0x80000000+0     
#define OSD_FIELD_ROOT_SECURITY_ALG_2 (&(gen_structs[16].fields[12])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_ALG_2 0x80000000+1     
#define OSD_FIELD_ROOT_SECURITY_ALG_3 (&(gen_structs[16].fields[13])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_ALG_3 0x80000000+2     
#define OSD_FIELD_ROOT_SECURITY_ALG_4 (&(gen_structs[16].fields[14])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_ALG_4 0x80000000+3     
#define OSD_FIELD_ROOT_SECURITY_ALG_5 (&(gen_structs[16].fields[15])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_ALG_5 0x80000000+4     
#define OSD_FIELD_ROOT_SECURITY_ALG_6 (&(gen_structs[16].fields[16])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_ALG_6 0x80000000+5     
#define OSD_FIELD_ROOT_SECURITY_ALG_7 (&(gen_structs[16].fields[17])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_ALG_7 0x80000000+6     
#define OSD_FIELD_ROOT_SECURITY_ALG_8 (&(gen_structs[16].fields[18])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_ALG_8 0x80000000+7     
#define OSD_FIELD_ROOT_SECURITY_ALG_9 (&(gen_structs[16].fields[19])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_ALG_9 0x80000000+8     
#define OSD_FIELD_ROOT_SECURITY_ALG_10 (&(gen_structs[16].fields[20])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_ALG_10 0x80000000+9     
#define OSD_FIELD_ROOT_SECURITY_ALG_11 (&(gen_structs[16].fields[21])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_ALG_11 0x80000000+10     
#define OSD_FIELD_ROOT_SECURITY_ALG_12 (&(gen_structs[16].fields[22])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_ALG_12 0x80000000+11     
#define OSD_FIELD_ROOT_SECURITY_ALG_13 (&(gen_structs[16].fields[23])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_ALG_13 0x80000000+12     
#define OSD_FIELD_ROOT_SECURITY_ALG_14 (&(gen_structs[16].fields[24])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_ALG_14 0x80000000+13     
#define OSD_FIELD_ROOT_SECURITY_ALG_15 (&(gen_structs[16].fields[25])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_ALG_15 0x80000000+14     
#define OSD_FIELD_ROOT_SECURITY_ALG_16 (&(gen_structs[16].fields[26])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_ALG_16 0x80000000+15     
//supported DH groups
#define OSD_FIELD_ROOT_SECURITY_DH_GROUP_1 (&(gen_structs[16].fields[27])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_DH_GROUP_1 0x80000010+0     
#define OSD_FIELD_ROOT_SECURITY_DH_GROUP_2 (&(gen_structs[16].fields[28])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_DH_GROUP_2 0x80000010+1     
#define OSD_FIELD_ROOT_SECURITY_DH_GROUP_3 (&(gen_structs[16].fields[29])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_DH_GROUP_3 0x80000010+2     
#define OSD_FIELD_ROOT_SECURITY_DH_GROUP_4 (&(gen_structs[16].fields[30])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_DH_GROUP_4 0x80000010+3     
#define OSD_FIELD_ROOT_SECURITY_DH_GROUP_5 (&(gen_structs[16].fields[31])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_DH_GROUP_5 0x80000010+4     
#define OSD_FIELD_ROOT_SECURITY_DH_GROUP_6 (&(gen_structs[16].fields[32])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_DH_GROUP_6 0x80000010+5     
#define OSD_FIELD_ROOT_SECURITY_DH_GROUP_7 (&(gen_structs[16].fields[33])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_DH_GROUP_7 0x80000010+6     
#define OSD_FIELD_ROOT_SECURITY_DH_GROUP_8 (&(gen_structs[16].fields[34])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_DH_GROUP_8 0x80000010+7     
#define OSD_FIELD_ROOT_SECURITY_DH_GROUP_9 (&(gen_structs[16].fields[35])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_DH_GROUP_9 0x80000010+8     
#define OSD_FIELD_ROOT_SECURITY_DH_GROUP_10 (&(gen_structs[16].fields[36])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_DH_GROUP_10 0x80000010+9     
#define OSD_FIELD_ROOT_SECURITY_DH_GROUP_11 (&(gen_structs[16].fields[37])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_DH_GROUP_11 0x80000010+10     
#define OSD_FIELD_ROOT_SECURITY_DH_GROUP_12 (&(gen_structs[16].fields[38])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_DH_GROUP_12 0x80000010+11     
#define OSD_FIELD_ROOT_SECURITY_DH_GROUP_13 (&(gen_structs[16].fields[39])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_DH_GROUP_13 0x80000010+12     
#define OSD_FIELD_ROOT_SECURITY_DH_GROUP_14 (&(gen_structs[16].fields[40])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_DH_GROUP_14 0x80000010+13     
#define OSD_FIELD_ROOT_SECURITY_DH_GROUP_15 (&(gen_structs[16].fields[41])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_DH_GROUP_15 0x80000010+14     
#define OSD_FIELD_ROOT_SECURITY_DH_GROUP_16 (&(gen_structs[16].fields[42])) 
#define OSD_ATTR_NUM_ROOT_SECURITY_DH_GROUP_16 0x80000010+15     

//page format is complicated and not supported

#define OSD_STRUCT_PART_SECURITY (&(gen_structs[17]))
#define OSD_PAGE_NUM_PART_SECURITY PAGE_P+0x5     

#define OSD_FIELD_PART_SECURITY_page_id (&(gen_structs[17].fields[0])) 
#define OSD_ATTR_NUM_PART_SECURITY_page_id 0
#define OSD_FIELD_PART_SECURITY_page_length (&(gen_structs[17].fields[1])) 
#define OSD_FIELD_PART_SECURITY_RESERVED1 (&(gen_structs[17].fields[2])) 
#define OSD_FIELD_PART_SECURITY_DEFAULT_SEC_METHOD (&(gen_structs[17].fields[3])) 
#define OSD_ATTR_NUM_PART_SECURITY_DEFAULT_SEC_METHOD 0x1     
//unused in NOSEC/CAPKEY
#define OSD_FIELD_PART_SECURITY_OLDEST_VALID_NONCE (&(gen_structs[17].fields[4])) 
#define OSD_ATTR_NUM_PART_SECURITY_OLDEST_VALID_NONCE 0x2     
//unused in NOSEC/CAPKEY
#define OSD_FIELD_PART_SECURITY_NEWEST_VALID_NONCE (&(gen_structs[17].fields[5])) 
#define OSD_ATTR_NUM_PART_SECURITY_NEWEST_VALID_NONCE 0x3     
//unused in NOSEC/CAPKEY
#define OSD_FIELD_PART_SECURITY_REQ_NONCE_LIST_DEPTH (&(gen_structs[17].fields[6])) 
#define OSD_ATTR_NUM_PART_SECURITY_REQ_NONCE_LIST_DEPTH 0x4     
#define OSD_FIELD_PART_SECURITY_FROZEN_KEYS_MASK (&(gen_structs[17].fields[7])) 
#define OSD_ATTR_NUM_PART_SECURITY_FROZEN_KEYS_MASK 0x5     
#define OSD_FIELD_PART_SECURITY_KEY_IDS_MASK (&(gen_structs[17].fields[8])) 
#define OSD_FIELD_PART_SECURITY_PARTITION_KEY_ID (&(gen_structs[17].fields[9])) 
#define OSD_ATTR_NUM_PART_SECURITY_PARTITION_KEY_ID 0x7FFF     
#define OSD_FIELD_PART_SECURITY_WORKING_KEY_ID_0 (&(gen_structs[17].fields[10])) 
#define OSD_ATTR_NUM_PART_SECURITY_WORKING_KEY_ID_0 0x8000+0     
#define OSD_FIELD_PART_SECURITY_WORKING_KEY_ID_1 (&(gen_structs[17].fields[11])) 
#define OSD_ATTR_NUM_PART_SECURITY_WORKING_KEY_ID_1 0x8000+1     
#define OSD_FIELD_PART_SECURITY_WORKING_KEY_ID_2 (&(gen_structs[17].fields[12])) 
#define OSD_ATTR_NUM_PART_SECURITY_WORKING_KEY_ID_2 0x8000+2     
#define OSD_FIELD_PART_SECURITY_WORKING_KEY_ID_3 (&(gen_structs[17].fields[13])) 
#define OSD_ATTR_NUM_PART_SECURITY_WORKING_KEY_ID_3 0x8000+3     
#define OSD_FIELD_PART_SECURITY_WORKING_KEY_ID_4 (&(gen_structs[17].fields[14])) 
#define OSD_ATTR_NUM_PART_SECURITY_WORKING_KEY_ID_4 0x8000+4     
#define OSD_FIELD_PART_SECURITY_WORKING_KEY_ID_5 (&(gen_structs[17].fields[15])) 
#define OSD_ATTR_NUM_PART_SECURITY_WORKING_KEY_ID_5 0x8000+5     
#define OSD_FIELD_PART_SECURITY_WORKING_KEY_ID_6 (&(gen_structs[17].fields[16])) 
#define OSD_ATTR_NUM_PART_SECURITY_WORKING_KEY_ID_6 0x8000+6     
#define OSD_FIELD_PART_SECURITY_WORKING_KEY_ID_7 (&(gen_structs[17].fields[17])) 
#define OSD_ATTR_NUM_PART_SECURITY_WORKING_KEY_ID_7 0x8000+7     
#define OSD_FIELD_PART_SECURITY_WORKING_KEY_ID_8 (&(gen_structs[17].fields[18])) 
#define OSD_ATTR_NUM_PART_SECURITY_WORKING_KEY_ID_8 0x8000+8     
#define OSD_FIELD_PART_SECURITY_WORKING_KEY_ID_9 (&(gen_structs[17].fields[19])) 
#define OSD_ATTR_NUM_PART_SECURITY_WORKING_KEY_ID_9 0x8000+9     
#define OSD_FIELD_PART_SECURITY_WORKING_KEY_ID_10 (&(gen_structs[17].fields[20])) 
#define OSD_ATTR_NUM_PART_SECURITY_WORKING_KEY_ID_10 0x8000+10     
#define OSD_FIELD_PART_SECURITY_WORKING_KEY_ID_11 (&(gen_structs[17].fields[21])) 
#define OSD_ATTR_NUM_PART_SECURITY_WORKING_KEY_ID_11 0x8000+11     
#define OSD_FIELD_PART_SECURITY_WORKING_KEY_ID_12 (&(gen_structs[17].fields[22])) 
#define OSD_ATTR_NUM_PART_SECURITY_WORKING_KEY_ID_12 0x8000+12     
#define OSD_FIELD_PART_SECURITY_WORKING_KEY_ID_13 (&(gen_structs[17].fields[23])) 
#define OSD_ATTR_NUM_PART_SECURITY_WORKING_KEY_ID_13 0x8000+13     
#define OSD_FIELD_PART_SECURITY_WORKING_KEY_ID_14 (&(gen_structs[17].fields[24])) 
#define OSD_ATTR_NUM_PART_SECURITY_WORKING_KEY_ID_14 0x8000+14     
#define OSD_FIELD_PART_SECURITY_WORKING_KEY_ID_15 (&(gen_structs[17].fields[25])) 
#define OSD_ATTR_NUM_PART_SECURITY_WORKING_KEY_ID_15 0x8000+15     
#define OSD_FIELD_PART_SECURITY_POLICY_ACCESS_TAG (&(gen_structs[17].fields[26])) 
#define OSD_ATTR_NUM_PART_SECURITY_POLICY_ACCESS_TAG 0x40000001     
#define OSD_FIELD_PART_SECURITY_USER_OBJ_POLICY_ACCESS_TAG (&(gen_structs[17].fields[27])) 
#define OSD_ATTR_NUM_PART_SECURITY_USER_OBJ_POLICY_ACCESS_TAG 0x40000002     

typedef struct {
    uint32_t page_id;
    uint32_t page_length;
    uint8_t RESERVED1[3];
    uint8_t DEFAULT_SEC_METHOD;
    uint48_t OLDEST_VALID_NONCE;
    uint48_t NEWEST_VALID_NONCE;
    uint16_t REQ_NONCE_LIST_DEPTH;
    uint16_t FROZEN_KEYS_MASK;
    uint8_t KEY_IDS_MASK[3];
    uint8_t PARTITION_KEY_ID[7];
    uint8_t WORKING_KEY_ID_0[7];
    uint8_t WORKING_KEY_ID_1[7];
    uint8_t WORKING_KEY_ID_2[7];
    uint8_t WORKING_KEY_ID_3[7];
    uint8_t WORKING_KEY_ID_4[7];
    uint8_t WORKING_KEY_ID_5[7];
    uint8_t WORKING_KEY_ID_6[7];
    uint8_t WORKING_KEY_ID_7[7];
    uint8_t WORKING_KEY_ID_8[7];
    uint8_t WORKING_KEY_ID_9[7];
    uint8_t WORKING_KEY_ID_10[7];
    uint8_t WORKING_KEY_ID_11[7];
    uint8_t WORKING_KEY_ID_12[7];
    uint8_t WORKING_KEY_ID_13[7];
    uint8_t WORKING_KEY_ID_14[7];
    uint8_t WORKING_KEY_ID_15[7];
    uint32_t POLICY_ACCESS_TAG;
    uint32_t USER_OBJ_POLICY_ACCESS_TAG;
    PACKED_STRUCT_END;
} PACKED OSD_PART_SECURITY_t;

#define SIZEOF_OSD_PART_SECURITY_t 158 

//collection sec. not implemented

#define OSD_STRUCT_UOBJ_SECURITY (&(gen_structs[18]))
#define OSD_PAGE_NUM_UOBJ_SECURITY PAGE_U+0x5     

#define OSD_FIELD_UOBJ_SECURITY_page_id (&(gen_structs[18].fields[0])) 
#define OSD_ATTR_NUM_UOBJ_SECURITY_page_id 0
#define OSD_FIELD_UOBJ_SECURITY_page_length (&(gen_structs[18].fields[1])) 
#define OSD_FIELD_UOBJ_SECURITY_POLICY_ACCESS_TAG (&(gen_structs[18].fields[2])) 
#define OSD_ATTR_NUM_UOBJ_SECURITY_POLICY_ACCESS_TAG 0x40000001     

typedef struct {
    uint32_t page_id;
    uint32_t page_length;
    uint32_t POLICY_ACCESS_TAG;
    PACKED_STRUCT_END;
} PACKED OSD_UOBJ_SECURITY_t;

#define SIZEOF_OSD_UOBJ_SECURITY_t 12 

//unassociated pages:

#define OSD_STRUCT_CUR_CMD (&(gen_structs[19]))
#define OSD_PAGE_NUM_CUR_CMD PAGE_A+0xFFFFFFE     
    // current command attribute page (associated with root object)

#define OSD_FIELD_CUR_CMD_page_id (&(gen_structs[19].fields[0])) 
#define OSD_ATTR_NUM_CUR_CMD_page_id 0
#define OSD_FIELD_CUR_CMD_page_length (&(gen_structs[19].fields[1])) 
//unused in NOSEC/CAPKEY
#define OSD_FIELD_CUR_CMD_RESPONSE_INT_CHECK_VAL (&(gen_structs[19].fields[2])) 
#define OSD_ATTR_NUM_CUR_CMD_RESPONSE_INT_CHECK_VAL 0x1     
#define OSD_FIELD_CUR_CMD_OBJ_TYPE (&(gen_structs[19].fields[3])) 
#define OSD_ATTR_NUM_CUR_CMD_OBJ_TYPE 0x2     
#define OSD_FIELD_CUR_CMD_RESERVED0 (&(gen_structs[19].fields[4])) 
#define OSD_FIELD_CUR_CMD_PARTITION_ID (&(gen_structs[19].fields[5])) 
#define OSD_ATTR_NUM_CUR_CMD_PARTITION_ID 0x3     
#define OSD_FIELD_CUR_CMD_OBJ_ID (&(gen_structs[19].fields[6])) 
#define OSD_ATTR_NUM_CUR_CMD_OBJ_ID 0x4     
#define OSD_FIELD_CUR_CMD_APPEND_STARTING_BYTE (&(gen_structs[19].fields[7])) 
#define OSD_ATTR_NUM_CUR_CMD_APPEND_STARTING_BYTE 0x5     

typedef struct {
    uint32_t page_id;
    uint32_t page_length;
    uint8_t RESPONSE_INT_CHECK_VAL[20];
    uint8_t OBJ_TYPE;
    uint8_t RESERVED0[3];
    uint64_t PARTITION_ID;
    uint64_t OBJ_ID;
    uint64_t APPEND_STARTING_BYTE;
    PACKED_STRUCT_END;
} PACKED OSD_CUR_CMD_t;

#define SIZEOF_OSD_CUR_CMD_t 56 

//Non standard pages used to store secret keys:
//all attributes should be with OSD_ATTR_NO_ACCESS so they are secret

#define OSD_STRUCT_IBM_ROOT_KEYS (&(gen_structs[20]))
#define OSD_PAGE_NUM_IBM_ROOT_KEYS PAGE_R+PAGE_T_VND+1     
    //number is in the range designated for vendor specific pages

#define OSD_FIELD_IBM_ROOT_KEYS_page_id (&(gen_structs[20].fields[0])) 
#define OSD_ATTR_NUM_IBM_ROOT_KEYS_page_id 0
#define OSD_FIELD_IBM_ROOT_KEYS_page_length (&(gen_structs[20].fields[1])) 
#define OSD_FIELD_IBM_ROOT_KEYS_MASTER_AUTH_KEY (&(gen_structs[20].fields[2])) 
#define OSD_ATTR_NUM_IBM_ROOT_KEYS_MASTER_AUTH_KEY 1     
#define OSD_FIELD_IBM_ROOT_KEYS_MASTER_GEN_KEY (&(gen_structs[20].fields[3])) 
#define OSD_ATTR_NUM_IBM_ROOT_KEYS_MASTER_GEN_KEY 2     
#define OSD_FIELD_IBM_ROOT_KEYS_ROOT_AUTH_KEY (&(gen_structs[20].fields[4])) 
#define OSD_ATTR_NUM_IBM_ROOT_KEYS_ROOT_AUTH_KEY 3     
#define OSD_FIELD_IBM_ROOT_KEYS_ROOT_GEN_KEY (&(gen_structs[20].fields[5])) 
#define OSD_ATTR_NUM_IBM_ROOT_KEYS_ROOT_GEN_KEY 4     


#define OSD_STRUCT_IBM_PART_KEYS (&(gen_structs[21]))
#define OSD_PAGE_NUM_IBM_PART_KEYS PAGE_P+PAGE_T_VND+2     
    //number is in the range designated for vendor specific pages

#define OSD_FIELD_IBM_PART_KEYS_page_id (&(gen_structs[21].fields[0])) 
#define OSD_ATTR_NUM_IBM_PART_KEYS_page_id 0
#define OSD_FIELD_IBM_PART_KEYS_page_length (&(gen_structs[21].fields[1])) 
#define OSD_FIELD_IBM_PART_KEYS_PART_AUTH_KEY (&(gen_structs[21].fields[2])) 
#define OSD_ATTR_NUM_IBM_PART_KEYS_PART_AUTH_KEY 5     
#define OSD_FIELD_IBM_PART_KEYS_PART_GEN_KEY (&(gen_structs[21].fields[3])) 
#define OSD_ATTR_NUM_IBM_PART_KEYS_PART_GEN_KEY 6     
#define OSD_FIELD_IBM_PART_KEYS_WORK_KEY_0 (&(gen_structs[21].fields[4])) 
#define OSD_ATTR_NUM_IBM_PART_KEYS_WORK_KEY_0 0x10     
#define OSD_FIELD_IBM_PART_KEYS_WORK_KEY_1 (&(gen_structs[21].fields[5])) 
#define OSD_ATTR_NUM_IBM_PART_KEYS_WORK_KEY_1 0x11     
#define OSD_FIELD_IBM_PART_KEYS_WORK_KEY_2 (&(gen_structs[21].fields[6])) 
#define OSD_ATTR_NUM_IBM_PART_KEYS_WORK_KEY_2 0x12     
#define OSD_FIELD_IBM_PART_KEYS_WORK_KEY_3 (&(gen_structs[21].fields[7])) 
#define OSD_ATTR_NUM_IBM_PART_KEYS_WORK_KEY_3 0x13     
#define OSD_FIELD_IBM_PART_KEYS_WORK_KEY_4 (&(gen_structs[21].fields[8])) 
#define OSD_ATTR_NUM_IBM_PART_KEYS_WORK_KEY_4 0x14     
#define OSD_FIELD_IBM_PART_KEYS_WORK_KEY_5 (&(gen_structs[21].fields[9])) 
#define OSD_ATTR_NUM_IBM_PART_KEYS_WORK_KEY_5 0x15     
#define OSD_FIELD_IBM_PART_KEYS_WORK_KEY_6 (&(gen_structs[21].fields[10])) 
#define OSD_ATTR_NUM_IBM_PART_KEYS_WORK_KEY_6 0x16     
#define OSD_FIELD_IBM_PART_KEYS_WORK_KEY_7 (&(gen_structs[21].fields[11])) 
#define OSD_ATTR_NUM_IBM_PART_KEYS_WORK_KEY_7 0x17     
#define OSD_FIELD_IBM_PART_KEYS_WORK_KEY_8 (&(gen_structs[21].fields[12])) 
#define OSD_ATTR_NUM_IBM_PART_KEYS_WORK_KEY_8 0x18     
#define OSD_FIELD_IBM_PART_KEYS_WORK_KEY_9 (&(gen_structs[21].fields[13])) 
#define OSD_ATTR_NUM_IBM_PART_KEYS_WORK_KEY_9 0x19     
#define OSD_FIELD_IBM_PART_KEYS_WORK_KEY_10 (&(gen_structs[21].fields[14])) 
#define OSD_ATTR_NUM_IBM_PART_KEYS_WORK_KEY_10 0x1A     
#define OSD_FIELD_IBM_PART_KEYS_WORK_KEY_11 (&(gen_structs[21].fields[15])) 
#define OSD_ATTR_NUM_IBM_PART_KEYS_WORK_KEY_11 0x1B     
#define OSD_FIELD_IBM_PART_KEYS_WORK_KEY_12 (&(gen_structs[21].fields[16])) 
#define OSD_ATTR_NUM_IBM_PART_KEYS_WORK_KEY_12 0x1C     
#define OSD_FIELD_IBM_PART_KEYS_WORK_KEY_13 (&(gen_structs[21].fields[17])) 
#define OSD_ATTR_NUM_IBM_PART_KEYS_WORK_KEY_13 0x1D     
#define OSD_FIELD_IBM_PART_KEYS_WORK_KEY_14 (&(gen_structs[21].fields[18])) 
#define OSD_ATTR_NUM_IBM_PART_KEYS_WORK_KEY_14 0x1E     
#define OSD_FIELD_IBM_PART_KEYS_WORK_KEY_15 (&(gen_structs[21].fields[19])) 
#define OSD_ATTR_NUM_IBM_PART_KEYS_WORK_KEY_15 0x1F     


#define OSD_STRUCT_IBM_UOBJ_FS_DATA (&(gen_structs[22]))
#define OSD_PAGE_NUM_IBM_UOBJ_FS_DATA PAGE_U+PAGE_T_VND+3     

#define OSD_FIELD_IBM_UOBJ_FS_DATA_page_id (&(gen_structs[22].fields[0])) 
#define OSD_ATTR_NUM_IBM_UOBJ_FS_DATA_page_id 0
#define OSD_FIELD_IBM_UOBJ_FS_DATA_page_length (&(gen_structs[22].fields[1])) 
#define OSD_FIELD_IBM_UOBJ_FS_DATA_INODE (&(gen_structs[22].fields[2])) 
#define OSD_ATTR_NUM_IBM_UOBJ_FS_DATA_INODE 1     


#endif /*#ifndef GEN_ATTR_PAGES_H*/

